!pip install sqlalchemy==1.3.9
%load_ext sql
import csv, sqlite3

con = sqlite3.connect("my_data1.db")
cur = con.cursor()

!pip install -q pandas==1.1.5

%sql sqlite:///my_data1.db

import pandas as pd
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")
df.to_sql("SPACEXTBL", con, if_exists='replace', index=False,method="multi")

%sql create table SPACEXTABLE as select * from SPACEXTBL where Date is not null
%%sql
-- SELECT * FROM SPACEXTABLE LIMIT 1
SELECT DISTINCT(LANDING_OUTCOME) FROM SPACEXTABLE

%sql SELECT DISTINCT LAUNCH_SITE FROM SPACEXTABLE
%sql select launch_site from SPACEXTABLE where launch_site like 'CCA%' limit 5
%sql SELECT SUM(PAYLOAD_MASS__KG_) FROM SPACEXTABLE
%sql SELECT AVG(PAYLOAD_MASS__KG_) FROM SPACEXTABLE WHERE BOOSTER_VERSION LIKE 'F9 v1.1%'
%sql SELECT MIN(DATE) FROM SPACEXTABLE WHERE Landing_Outcome LIKE 'SUCCES%'
%sql SELECT BOOSTER_VERSION, LANDING_OUTCOME, PAYLOAD_MASS__KG_ FROM SPACEXTABLE WHERE ((LANDING_OUTCOME LIKE 'SUCCES%') AND 4000<PAYLOAD_MASS__KG_ AND PAYLOAD_MASS__KG_<6000) 
%%sql 
SELECT
    COUNT(CASE WHEN LANDING_OUTCOME LIKE 'SUCCESS%' THEN 1 END) AS success_count,
    COUNT(CASE WHEN LANDING_OUTCOME LIKE 'FAILURE%' THEN 1 END) AS failure_count
FROM SPACEXTABLE;

%%sql
SELECT BOOSTER_VERSION FROM SPACEXTABLE WHERE PAYLOAD_MASS__KG_ = (SELECT MAX(PAYLOAD_MASS__KG_) FROM SPACEXTABLE)

%%sql
-- SELECT DISTINCT(LANDING_OUTCOME) FROM SPACEXTABLE
SELECT * FROM SPACEXTABLE LIMIT 1 

%%sql
SELECT substr(Date, 6,2) AS MONTH, LANDING_OUTCOME, BOOSTER_VERSION, LAUNCH_SITE FROM SPACEXTABLE 
WHERE (substr(Date,0,5)='2015') AND (LANDING_OUTCOME = 'Failure (drone ship)')

%%sql
SELECT LANDING_OUTCOME, COUNT(LANDING_OUTCOME) as total
FROM SPACEXTABLE
WHERE DATE BETWEEN 4000 AND 5000 
GROUP BY LANDING_OUTCOME

%%sql
SELECT LANDING_OUTCOME, COUNT(LANDING_OUTCOME) as total
FROM SPACEXTABLE
WHERE DATE BETWEEN 4000 AND 5000 
GROUP BY LANDING_OUTCOME
